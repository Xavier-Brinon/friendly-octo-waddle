#+title: Exercism track
#+author: Xavier Brinon <xavier@brinon.eu>
#+date: [2024-10-20 Sun]
#+startup: indent
#+property: header-args :results output
#+link exercism https://exercism.org/dashboard
#+link opam https://opam.ocaml.org/
#+link docs https://ocaml.org/docs/your-first-program
* Creating a Project
This is something I'll do a lot, better do it properly.
Let's suppose I'm building a project called *Arrowhead*.
** Using *Dune*
Following the [[https://dune.readthedocs.io/en/stable/quick-start.html][Dune Quickstart]]
*** Init
#+name: 01 Init dune project
#+begin_src shell
  dune init proj arrowhead
#+end_src

#+RESULTS: 01 Init dune project

*** Folder Structure
This creates a folder called ~arrowhead~ with the following structure
#+name: 02 Arrowhead folder structure
#+begin_src shell
  cd arrowhead
  tree .
#+end_src

#+RESULTS: 02 Arrowhead folder structure
#+begin_example
.
├── arrowhead.opam
├── bin
│   ├── dune
│   └── main.ml
├── _build
│   └── log
├── dune-project
├── lib
│   └── dune
└── test
    ├── dune
    └── test_arrowhead.ml

5 directories, 8 files
#+end_example

*** Build and Test Project
Build the project with
#+name: 03 build arrowhead
#+begin_src shell
  cd arrowhead
  dune build
#+end_src

#+RESULTS: 03 build arrowhead

To run the test
#+name: 04 test arrowhead
#+begin_src shell
  cd arrowhead
  dune test
#+end_src

#+RESULTS: 04 test arrowhead

And run the program
#+name: 05 run arrowhead
#+begin_src shell
  cd arrowhead
  dune exec arrowhead
#+end_src

#+RESULTS: 05 run arrowhead
: Hello, World!

** Formatting
Start by creating the formatting file.
In the same folder as =dune-project=, create the file =.ocamlformat=
and add the ~version~ of ocamlformat and the ~profile~.

To get the version, execute the command
#+name: 06 ocamlformat version
#+begin_src shell
  ocamlformat --version
#+end_src

#+RESULTS: 06 ocamlformat version
: 0.26.2

For the profile, I pick ~default~.

#+begin_src txt :file arrowhead/.ocamlformat
version=0.26.2
profile=default
#+end_src

As this will modify lots of file, ~global-auto-revert-mode~ should be enabled.
To avoid formatting useless files (e.g. autogenerated), *ocamlformat* can look
up the ~.ocamlformat-ignore~ file.

To set up *emacs* so that the code gets formatted on save:
#+begin_src elisp :file ~/.config/emacs/init.el
  (use-package ocamlformat
    :custom (ocamlformat-enable 'enable-outside-detected-project)
    :hook (before-save . ocamlformat-before-save)
    )
#+end_src

To format the project as a whole:
#+begin_src shell
  cd arrowhead
  dune fmt
#+end_src

#+RESULTS:

** Documenting
I like the *ocamldoc* style. I`ll stick to this kind of comments
#+begin_src ocaml
   (** [random_int bound] is a random integer between 0 (inclusive)
       and [bound] (exclusive).
       Requires: [bound] is greater than 0 and less than 2^30.
       Raises: [Invalid_argument "bound"] otherwise. *)
#+end_src

To create the documentation, once *odoc* is installed [fn:1],
in the root folder:
#+begin_src shell
  cd arrowhead
  dune build @doc
#+end_src

you can now ~open arrowhead/_build/default/_doc/_html/index.html~

Search bar in the documentation is done by installing *Sherlodoc*
#+begin_src shell
  opam install sherlodoc
#+end_src
The bar will appear after the next ~dune build @doc~

** TODO Running tests
https://dune.readthedocs.io/en/stable/tests.html

* Footnotes

[fn:1] ~opam install odoc~
